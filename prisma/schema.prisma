generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl", "native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model FcmToken {
  userId    BigInt
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)
  fcmToken  String?  @db.VarChar(200)
  deviceId  String   @unique @db.VarChar(200)
  id        BigInt   @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  createdAt   DateTime   @default(now()) @db.DateTime(0)
  updatedAt   DateTime   @default(now()) @db.DateTime(0)
  phoneNumber String     @unique @db.Char(11)
  birthday    String     @db.Char(8)
  gender      String     @db.Char(1)
  email       String     @unique @db.VarChar(50)
  password    String     @db.VarChar(64)
  name        String     @db.VarChar(8)
  id          BigInt     @id @default(autoincrement())
  FcmToken    FcmToken[]
  Payment     Payment[]
}

model PlaceAdmin {
  createdAt    DateTime @default(now()) @db.DateTime(0)
  updatedAt    DateTime @default(now()) @db.DateTime(0)
  phoneNumber  String   @unique @db.Char(11)
  email        String   @unique @db.VarChar(50)
  password     String   @db.VarChar(64)
  name         String   @db.VarChar(8)
  id           BigInt   @id @default(autoincrement())
  profileImage String   @db.Text
  Center       Center[]
}

model Center {
  id                      BigInt                    @id @default(autoincrement())
  adminId                 BigInt
  createAt                DateTime                  @default(now()) @db.DateTime(0)
  updatedAt               DateTime                  @default(now()) @db.DateTime(0)
  name                    String                    @db.VarChar(40)
  address                 String                    @unique @db.VarChar(85)
  detailAddress           String                    @db.VarChar(85)
  phoneNumber             String                    @unique @db.VarChar(20)
  location                Unsupported("point")?
  latitude                Float
  longitude               Float
  PlaceAdmin              PlaceAdmin                @relation(fields: [adminId], references: [id])
  CenterLookupInformation CenterLookupInformation[]
  CenterParkingLot        CenterParkingLot?
  Studio                  Studio[]

  @@index([adminId])
}

model CenterLookupInformation {
  id                 BigInt   @id @default(autoincrement())
  centerId           BigInt
  createAt           DateTime @default(now()) @db.DateTime(0)
  updateAt           DateTime @default(now()) @db.DateTime(0)
  ceoName            String   @db.VarChar(20)
  busniessType       String   @db.VarChar(250)
  busniessCode       String   @unique @db.Char(10)
  businessAttachment String   @db.Text
  adminPhonenumber   String   @db.Char(11)
  adminEmail         String   @db.VarChar(50)
  Center             Center   @relation(fields: [centerId], references: [id])

  @@index([centerId])
}

model Studio {
  id                  BigInt                @id @default(autoincrement())
  centerId            BigInt
  createdAt           DateTime              @default(now()) @db.DateTime(0)
  updateAt            DateTime              @default(now()) @db.DateTime(0)
  name                String                @db.VarChar(40)
  content             String                @db.Text
  checkInNotice       String?               @db.Text
  basicOccupancy      Int
  maximumOccupancy    Int
  overCharge          Int
  lowestPrice         Int
  highestPrice        Int
  Center              Center                @relation(fields: [centerId], references: [id])
  StudioRentalTime    StudioRentalTime?
  StudioAmenity       StudioAmenity[]
  StudioBreakTime     StudioBreakTime[]
  StudioComplimentary StudioComplimentary[]
  StudioHashTag       StudioHashTag[]
  StudioHoliday       StudioHoliday[]
  StudioPrecaution    StudioPrecaution[]
  StudioPriceByHour   StudioPriceByHour[]

  @@index([centerId])
}

model StudioRentalTime {
    id       BigInt   @id @default(autoincrement())
    studioId BigInt
    openHours           DateTime             @db.DateTime(0)
    closedHours         DateTime             @db.DateTime(0)
    minimumReantalTime  Int
    rentalTimeUnit      Int
    Studio   Studio   @relation(fields: [studioId], references: [id])

    @@index([studioId])
}

model StudioBreakTime {
  id       BigInt   @id @default(autoincrement())
  studioId BigInt
  date     DateTime @db.Date
  time     DateTime @db.Time(0)
  reason   String   @db.VarChar(200)
  Studio   Studio   @relation(fields: [studioId], references: [id])

  @@index([studioId])
}

model StudioHashTag {
  id       BigInt @id @default(autoincrement())
  studioId BigInt
  content  String @db.VarChar(30)
  Studio   Studio @relation(fields: [studioId], references: [id])

  @@index([studioId])
}

model StudioHoliday {
  id       BigInt   @id @default(autoincrement())
  studioId BigInt
  date     DateTime @db.Date
  reason   String   @db.VarChar(200)
  Studio   Studio   @relation(fields: [studioId], references: [id])

  @@index([studioId])
}

model StudioPriceByHour {
  id        BigInt   @id @default(autoincrement())
  studioId  BigInt
  updateAt  DateTime @default(now()) @db.DateTime(0)
  dayOfWeek String   @db.VarChar(10)
  time      DateTime @db.Time(0)
  price     Int
  Studio    Studio   @relation(fields: [studioId], references: [id])

  @@index([studioId])
}

model CenterParkingLot {
  centerId        BigInt    @id @default(autoincrement())
  updateAt        DateTime  @default(now()) @db.DateTime(0)
  isAvailable     Boolean
  paymentType     String?   @db.Char(4)
  firstTime       DateTime? @db.Time(0)
  firstPayment    Int?
  additionTime    DateTime? @db.Time(0)
  additionPayment Int?
  allDayPayment   Int?
  oneTimePayment  Int?
  content         String?   @db.Text
  Center          Center    @relation(fields: [centerId], references: [id])
}

model StudioAmenity {
  studioId    BigInt
  amenityId   String
  AmenityList AmenityList @relation(fields: [amenityId], references: [id])
  Studio      Studio      @relation(fields: [studioId], references: [id])

  @@id([studioId, amenityId])
  @@index([amenityId])
}

model StudioComplimentary {
  studioId          BigInt
  complimentaryId   String
  ComplimentaryList ComplimentaryList @relation(fields: [complimentaryId], references: [id])
  Studio            Studio            @relation(fields: [studioId], references: [id])

  @@id([studioId, complimentaryId])
  @@index([complimentaryId])
}

model StudioPrecaution {
  studioId       BigInt
  precautionId   BigInt
  PrecautionList PrecautionList @relation(fields: [precautionId], references: [id])
  Studio         Studio         @relation(fields: [studioId], references: [id])

  @@id([studioId, precautionId])
  @@index([precautionId])
}

model AmenityList {
  id            String          @id @db.VarChar(20)
  image         String          @db.Text
  StudioAmenity StudioAmenity[]
}

model ComplimentaryList {
  id                  String                @id @db.VarChar(20)
  image               String?               @db.Text
  StudioComplimentary StudioComplimentary[]
}

model PrecautionList {
  id               BigInt             @id @default(autoincrement())
  content          String
  StudioPrecaution StudioPrecaution[]
}

model Payment {
  id         BigInt    @id @default(autoincrement())
  userId     BigInt
  billingKey String    @db.VarChar(60)
  birthday   String    @db.VarChar(6)
  cardNumber String    @db.VarChar(100)
  deletedAt  DateTime? @db.DateTime(0)
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  updatedAt  DateTime  @default(now()) @db.DateTime(0)
  isDeleted  Boolean   @default(false)
  cardName   String    @db.VarChar(10)
  User       User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "Payment_userId_fkey")
}
